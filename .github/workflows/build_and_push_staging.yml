name: Docker build and push to staging

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }}
  AWS_ACCOUNT_STAGING: 843973686572
  REGISTRY: 843973686572.dkr.ecr.ca-central-1.amazonaws.com/url-shortener
  FUNCTION_PREFIX: url-shortener
  AWS_REGION: ca-central-1

permissions:
  id-token: write
  contents: write
  security-events: write

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT_STAGING}}:role/url-shortener-apply
          role-session-name: ECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Build image
        working-directory: ./api
        run: |
          docker build \
          --build-arg GIT_SHA=$GITHUB_SHA \
          -t $REGISTRY/api:$GITHUB_SHA \
          -t $REGISTRY/api:latest .

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2fc7aceee09e9e4a7105c0d060c656fad0b4f63d # v1.7.0

      - name: Push image to ECR
        run: |
          docker push $REGISTRY/api:$GITHUB_SHA
          docker push $REGISTRY/api:latest

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@cfec0943e40dbb78cee115bbbe89dc17f07b7a0f # v2.1.3
        with:
          docker_image: "${{ env.REGISTRY }}/api:${{ env.GITHUB_SHA }}"
          dockerfile_path: "api/Dockerfile"
          sbom_name: "api"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Deploy new image
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.FUNCTION_PREFIX }}-api \
            --image-uri $REGISTRY/api:$GITHUB_SHA  > /dev/null 2>&1

      - name: Publish new lambda version
        run: |
            aws lambda wait function-updated --function-name ${{ env.FUNCTION_PREFIX }}-api
            echo "VERSION=$(aws lambda publish-version --function-name ${{ env.FUNCTION_PREFIX }}-api | jq -r '.Version')" >> $GITHUB_ENV

      - name: Shift lambda traffic over 4 minutes
        uses: cds-snc/aws-lambda-traffic-shifting-action@6b134de1b3404f6c12331f5cf25904671228a960 # 0.4
        env:
            ALIAS: latest
            FUNCTION_NAME: ${{ env.FUNCTION_PREFIX }}-api
            GREEN_VERSION: ${{ env.VERSION }}
            ROLLOUT_STEPS: 4
            ROLLOUT_TIME_IN_MINUTES: 4

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: CloudFront cache invalidate
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DIST_ID }} --paths "/*"
